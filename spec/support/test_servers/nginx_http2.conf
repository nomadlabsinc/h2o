# Nginx HTTP/2 test server configuration
# Listens on port 8443 with HTTP/2 support

daemon off;
worker_processes 1;
error_log /tmp/nginx_error.log warn;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    # Basic MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    access_log /tmp/nginx_access.log;

    # Temporary directories
    client_body_temp_path /tmp/nginx_client_temp;
    proxy_temp_path /tmp/nginx_proxy_temp;
    fastcgi_temp_path /tmp/nginx_fastcgi_temp;
    uwsgi_temp_path /tmp/nginx_uwsgi_temp;
    scgi_temp_path /tmp/nginx_scgi_temp;

    # HTTP/2 server on port 8443
    server {
        listen 8443 ssl http2;
        server_name localhost;

        # SSL configuration
        ssl_certificate /workspace/spec/support/test_servers/ssl/cert.pem;
        ssl_certificate_key /workspace/spec/support/test_servers/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # HTTP/2 specific settings
        http2_max_field_size 16k;
        http2_max_header_size 32k;

        # Health check endpoint
        location /health {
            add_header Content-Type application/json;
            add_header X-Protocol HTTP/2;
            return 200 '{"status":"healthy","protocol":"HTTP/2","server":"Nginx","timestamp":"$time_iso8601"}';
        }

        # GET endpoint
        location /get {
            add_header Content-Type application/json;
            add_header X-Protocol HTTP/2;
            return 200 '{"method":"GET","protocol":"HTTP/2","path":"$request_uri","timestamp":"$time_iso8601"}';
        }

        # Headers endpoint
        location /headers {
            add_header Content-Type application/json;
            add_header X-Protocol HTTP/2;
            return 200 '{"headers":{"host":"$host","user-agent":"$http_user_agent","accept":"$http_accept"},"protocol":"HTTP/2","method":"$request_method","url":"$request_uri"}';
        }

        # Status code endpoints
        location /status/200 {
            add_header Content-Type application/json;
            return 200 '{"status":200,"protocol":"HTTP/2"}';
        }

        location /status/201 {
            add_header Content-Type application/json;
            return 201 '{"status":201,"protocol":"HTTP/2"}';
        }

        location /status/404 {
            add_header Content-Type application/json;
            return 404 '{"status":404,"protocol":"HTTP/2"}';
        }

        location /status/500 {
            add_header Content-Type application/json;
            return 500 '{"status":500,"protocol":"HTTP/2"}';
        }

        # POST endpoint (limited functionality in nginx)
        location /post {
            add_header Content-Type application/json;
            add_header X-Protocol HTTP/2;
            return 200 '{"method":"POST","protocol":"HTTP/2","content_type":"$content_type","content_length":"$content_length","timestamp":"$time_iso8601"}';
        }

        # PUT endpoint
        location /put {
            add_header Content-Type application/json;
            add_header X-Protocol HTTP/2;
            return 200 '{"method":"PUT","protocol":"HTTP/2","content_type":"$content_type","timestamp":"$time_iso8601"}';
        }

        # DELETE endpoint
        location /delete {
            add_header Content-Type application/json;
            add_header X-Protocol HTTP/2;
            return 200 '{"method":"DELETE","protocol":"HTTP/2","path":"$request_uri","timestamp":"$time_iso8601"}';
        }

        # Delay endpoint
        location ~ ^/delay/(\d+)$ {
            set $delay_time $1;
            add_header Content-Type application/json;
            add_header X-Protocol HTTP/2;
            # Nginx doesn't have native sleep, so we'll just return immediately
            return 200 '{"delayed":$delay_time,"protocol":"HTTP/2","timestamp":"$time_iso8601","note":"Nginx limitation: no actual delay"}';
        }

        # HTTP/2 reject endpoint
        location /reject-h1 {
            add_header Content-Type application/json;
            add_header X-Protocol HTTP/2;
            return 200 '{"message":"This endpoint only works with HTTP/2","protocol":"HTTP/2","connection_successful":true,"timestamp":"$time_iso8601"}';
        }

        # Default endpoint
        location / {
            add_header Content-Type application/json;
            add_header X-Protocol HTTP/2;
            return 200 '{"message":"Nginx HTTP/2 test server","protocol":"HTTP/2","method":"$request_method","path":"$request_uri","timestamp":"$time_iso8601"}';
        }
    }
}
