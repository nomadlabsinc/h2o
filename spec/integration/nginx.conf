# CI-optimized nginx configuration
# Based on patterns from Go/Rust HTTP2 libraries

worker_processes auto;
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

http {
    # Performance optimizations for CI tests
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 30s;
    keepalive_requests 1000;
    reset_timedout_connection on;

    # Connection pool settings
    client_body_timeout 10s;
    client_header_timeout 10s;
    send_timeout 10s;

    # Buffer sizes optimized for tests
    client_body_buffer_size 16K;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 16k;

    # HTTP/2 specific settings
    http2_max_concurrent_streams 256;
    http2_max_field_size 16k;
    http2_max_header_size 32k;

    # Disable logging for faster responses
    access_log off;
    error_log /dev/stderr warn;

    server {
        listen 443 ssl;
        http2 on;
        server_name localhost;

        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 5m;

        # Health check endpoint for CI
        location /health {
            access_log off;
            add_header Content-Type text/plain;
            add_header X-Health-Check "OK";
            return 200 'OK';
        }

        location / {
            add_header Content-Type application/json;
            add_header X-Protocol "$server_protocol";
            return 200 '{"message":"Nginx HTTP/2 test server","protocol":"$server_protocol","method":"$request_method","path":"$request_uri","timestamp":"$time_iso8601"}';
        }

        location /headers {
            add_header Content-Type application/json;
            add_header X-Protocol "$server_protocol";
            return 200 '{"headers":{"host":"$host","user-agent":"$http_user_agent","accept":"$http_accept"},"protocol":"$server_protocol","method":"$request_method","url":"$request_uri"}';
        }

        location /status/200 {
            add_header Content-Type application/json;
            return 200 '{"status": 200}';
        }

        location /status/404 {
            add_header Content-Type application/json;
            return 404 '{"status": 404, "error": "Not Found"}';
        }

        location /status/500 {
            add_header Content-Type application/json;
            return 500 '{"status": 500, "error": "Internal Server Error"}';
        }

        location /status/201 {
            add_header Content-Type application/json;
            return 201 '{"status": 201}';
        }

        location /status/204 {
            add_header Content-Type application/json;
            return 204 '';
        }

        location /status/301 {
            add_header Content-Type application/json;
            return 301 '{"status": 301, "redirect": "https://localhost:8443/"}';
        }

        location /get {
            add_header Content-Type application/json;
            return 200 '{"args": {}, "headers": {"host": "$host", "user-agent": "$http_user_agent"}, "origin": "127.0.0.1", "url": "https://$host$request_uri", "method": "$request_method"}';
        }

        location /post {
            add_header Content-Type application/json;
            return 200 '{"args": {}, "data": "", "headers": {"host": "$host", "user-agent": "$http_user_agent"}, "json": null, "origin": "127.0.0.1", "url": "https://$host$request_uri", "method": "$request_method"}';
        }

        location /put {
            add_header Content-Type application/json;
            return 200 '{"args": {}, "data": "", "headers": {"host": "$host", "user-agent": "$http_user_agent"}, "json": null, "origin": "127.0.0.1", "url": "https://$host$request_uri", "method": "$request_method"}';
        }

        location /delete {
            add_header Content-Type application/json;
            return 200 '{"args": {}, "headers": {"host": "$host", "user-agent": "$http_user_agent"}, "origin": "127.0.0.1", "url": "https://$host$request_uri", "method": "$request_method"}';
        }

        location /patch {
            add_header Content-Type application/json;
            return 200 '{"args": {}, "data": "", "headers": {"host": "$host", "user-agent": "$http_user_agent"}, "json": null, "origin": "127.0.0.1", "url": "https://$host$request_uri", "method": "$request_method"}';
        }

        location /json {
            add_header Content-Type application/json;
            return 200 '{"slideshow": {"author": "Yours Truly", "date": "date of publication", "slides": [{"title": "Wake up to WonderWidgets!", "type": "all"}, {"items": ["Why <em>WonderWidgets</em> are great", "Who <em>buys</em> WonderWidgets"], "title": "Overview", "type": "all"}], "title": "Sample Slide Show"}}';
        }

        location /xml {
            add_header Content-Type application/xml;
            return 200 '<?xml version="1.0" encoding="UTF-8"?><note><to>Tove</to><from>Jani</from><heading>Reminder</heading><body>Do not forget me this weekend!</body></note>';
        }

        location /html {
            add_header Content-Type text/html;
            return 200 '<!DOCTYPE html><html><head><title>Test</title></head><body><h1>Herman Melville - Moby-Dick</h1></body></html>';
        }

        location /gzip {
            add_header Content-Type application/json;
            gzip on;
            return 200 '{"gzipped": true, "method": "$request_method", "origin": "127.0.0.1"}';
        }

        location /encoding/utf8 {
            add_header Content-Type text/html;
            return 200 '<!DOCTYPE html><html><head><title>UTF-8 Demo</title></head><body><h1>UTF-8 encoded data: ∮ E⋅da = Q,  n → ∞, ∑ f(i) = ∏ g(i)</h1></body></html>';
        }

        location ~ ^/delay/(\d+)$ {
            add_header Content-Type application/json;
            return 200 '{"args": {}, "headers": {"host": "$host"}, "origin": "127.0.0.1", "url": "https://$host$request_uri", "delayed": true}';
        }

        location ~ ^/bytes/(\d+)$ {
            add_header Content-Type application/octet-stream;
            return 200 "data";  # Simplified for nginx
        }

        location ~ ^/stream/(\d+)$ {
            add_header Content-Type application/json;
            return 200 '{"url": "https://$host$request_uri", "args": {}, "headers": {"host": "$host"}, "origin": "127.0.0.1", "stream": true}';
        }

        location /zen {
            add_header Content-Type text/plain;
            return 200 'Non-blocking is better than blocking.';
        }
    }

    # HTTP/1.1 only server for fallback testing
    server {
        listen 8445 ssl;  # No http2 directive = HTTP/1.1 only
        server_name localhost;

        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 5m;

        # HTTP/1.1 only - no ALPN configuration needed

        location /get {
            add_header Content-Type application/json;
            return 200 '{"args": {}, "headers": {"host": "$host", "user-agent": "$http_user_agent"}, "origin": "127.0.0.1", "url": "https://$host$request_uri", "method": "$request_method", "protocol": "HTTP/1.1"}';
        }

        location /post {
            add_header Content-Type application/json;
            return 200 '{"args": {}, "data": "", "headers": {"host": "$host", "user-agent": "$http_user_agent"}, "json": null, "origin": "127.0.0.1", "url": "https://$host$request_uri", "method": "$request_method", "protocol": "HTTP/1.1"}';
        }

        location /put {
            add_header Content-Type application/json;
            return 200 '{"args": {}, "data": "", "headers": {"host": "$host", "user-agent": "$http_user_agent"}, "json": null, "origin": "127.0.0.1", "url": "https://$host$request_uri", "method": "$request_method", "protocol": "HTTP/1.1"}';
        }

        location /delete {
            add_header Content-Type application/json;
            return 200 '{"args": {}, "headers": {"host": "$host", "user-agent": "$http_user_agent"}, "origin": "127.0.0.1", "url": "https://$host$request_uri", "method": "$request_method", "protocol": "HTTP/1.1"}';
        }

        location /patch {
            add_header Content-Type application/json;
            return 200 '{"args": {}, "data": "", "headers": {"host": "$host", "user-agent": "$http_user_agent"}, "json": null, "origin": "127.0.0.1", "url": "https://$host$request_uri", "method": "$request_method", "protocol": "HTTP/1.1"}';
        }

        location ~ ^/bytes/(\d+)$ {
            add_header Content-Type application/octet-stream;
            return 200 "data";  # Simplified for nginx
        }

        location /delay/0 {
            add_header Content-Type application/json;
            return 200 '{"args": {}, "headers": {"host": "$host", "user-agent": "$http_user_agent"}, "origin": "127.0.0.1", "url": "https://$host$request_uri", "method": "$request_method", "protocol": "HTTP/1.1"}';
        }

        location / {
            add_header Content-Type application/json;
            return 200 '{"message": "Hello from HTTP/1.1 server", "protocol": "$server_protocol", "method": "$request_method"}';
        }
    }
}
