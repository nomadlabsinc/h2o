name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-image:
    name: Build Docker Image
    runs-on: ubicloud-standard-4
    timeout-minutes: 2
    outputs:
      image-id: ${{ steps.build.outputs.imageid }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push development Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.dev
        tags: ghcr.io/nomadlabsinc/h2o-ci:${{ github.sha }}
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max


  test-unit:
    name: Unit Tests
    runs-on: ubicloud-standard-4
    needs: [build-image]
    timeout-minutes: 2

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull Docker image
      run: docker pull ghcr.io/nomadlabsinc/h2o-ci:${{ github.sha }}

    - name: Install dependencies
      uses: actions/cache@v3
      with:
        path: lib/
        key: ${{ runner.os }}-shards-${{ hashFiles('shard.yml', 'shard.lock') }}
        restore-keys: |
          ${{ runner.os }}-shards-

    - name: Install dependencies (if cache miss)
      run: |
        docker run --rm \
          -v $PWD:/workspace \
          -w /workspace \
          --user root \
          ghcr.io/nomadlabsinc/h2o-ci:${{ github.sha }} \
          bash -c "shards install"

    - name: Run unit tests
      timeout-minutes: 2
      run: |
        docker run --rm \
          -v $PWD:/workspace \
          -w /workspace \
          --user root \
          -e H2O_VERIFY_SSL=false \
          ghcr.io/nomadlabsinc/h2o-ci:${{ github.sha }} \
          bash -c "./scripts/ci_test_runner.sh unit"

  test-integration-group1:
    name: Integration Tests (Group 1)
    runs-on: ubicloud-standard-4
    needs: [build-image]
    timeout-minutes: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull Docker image
      run: docker pull ghcr.io/nomadlabsinc/h2o-ci:${{ github.sha }}

    - name: Install dependencies
      uses: actions/cache@v3
      with:
        path: lib/
        key: ${{ runner.os }}-shards-${{ hashFiles('shard.yml', 'shard.lock') }}
        restore-keys: |
          ${{ runner.os }}-shards-

    - name: Install dependencies (if cache miss)
      run: |
        docker run --rm \
          -v $PWD:/workspace \
          -w /workspace \
          --user root \
          ghcr.io/nomadlabsinc/h2o-ci:${{ github.sha }} \
          bash -c "shards install"

    - name: Build embedded test servers
      run: |
        docker run --rm \
          -v $PWD:/workspace \
          -w /workspace \
          --user root \
          ghcr.io/nomadlabsinc/h2o-ci:${{ github.sha }} \
          bash -c "./scripts/build_test_servers.sh"

    - name: Run integration tests
      timeout-minutes: 5
      run: |
        docker run --rm \
          -v $PWD:/workspace \
          -w /workspace \
          --user root \
          -e H2O_VERIFY_SSL=false \
          -e TEST_HTTP2_HOST=localhost \
          -e TEST_HTTP2_PORT=8443 \
          -e TEST_HTTP1_HOST=localhost \
          -e TEST_HTTP1_PORT=8080 \
          -e TEST_H2_ONLY_HOST=localhost \
          -e TEST_H2_ONLY_PORT=8447 \
          -e TEST_CADDY_HOST=localhost \
          -e TEST_CADDY_PORT=8447 \
          ghcr.io/nomadlabsinc/h2o-ci:${{ github.sha }} \
          bash -c "./scripts/ci_test_runner.sh integration-group1"


  test-integration-group2:
    name: Integration Tests (Group 2)
    runs-on: ubicloud-standard-4
    needs: [build-image]
    timeout-minutes: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull Docker image
      run: docker pull ghcr.io/nomadlabsinc/h2o-ci:${{ github.sha }}

    - name: Install dependencies
      uses: actions/cache@v3
      with:
        path: lib/
        key: ${{ runner.os }}-shards-${{ hashFiles('shard.yml', 'shard.lock') }}
        restore-keys: |
          ${{ runner.os }}-shards-

    - name: Install dependencies (if cache miss)
      run: |
        docker run --rm \
          -v $PWD:/workspace \
          -w /workspace \
          --user root \
          ghcr.io/nomadlabsinc/h2o-ci:${{ github.sha }} \
          bash -c "shards install"

    - name: Build embedded test servers
      run: |
        docker run --rm \
          -v $PWD:/workspace \
          -w /workspace \
          --user root \
          ghcr.io/nomadlabsinc/h2o-ci:${{ github.sha }} \
          bash -c "./scripts/build_test_servers.sh"

    - name: Run integration tests
      timeout-minutes: 5
      run: |
        docker run --rm \
          -v $PWD:/workspace \
          -w /workspace \
          --user root \
          -e H2O_VERIFY_SSL=false \
          -e TEST_HTTP2_HOST=localhost \
          -e TEST_HTTP2_PORT=8443 \
          -e TEST_HTTP1_HOST=localhost \
          -e TEST_HTTP1_PORT=8080 \
          -e TEST_H2_ONLY_HOST=localhost \
          -e TEST_H2_ONLY_PORT=8447 \
          -e TEST_CADDY_HOST=localhost \
          -e TEST_CADDY_PORT=8447 \
          ghcr.io/nomadlabsinc/h2o-ci:${{ github.sha }} \
          bash -c "./scripts/ci_test_runner.sh integration-group2"

  test-performance:
    name: Performance Tests
    runs-on: ubicloud-standard-4
    needs: build-image
    if: contains(github.event.pull_request.labels.*.name, 'performance-test') || github.event_name == 'push'
    timeout-minutes: 2

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull Docker image
      run: docker pull ghcr.io/nomadlabsinc/h2o-ci:${{ github.sha }}

    - name: Install dependencies
      uses: actions/cache@v3
      with:
        path: lib/
        key: ${{ runner.os }}-shards-${{ hashFiles('shard.yml', 'shard.lock') }}
        restore-keys: |
          ${{ runner.os }}-shards-

    - name: Install dependencies (if cache miss)
      run: |
        docker run --rm \
          -v $PWD:/workspace \
          -w /workspace \
          --user root \
          ghcr.io/nomadlabsinc/h2o-ci:${{ github.sha }} \
          bash -c "shards install"

    - name: Run performance tests
      timeout-minutes: 2
      run: |
        docker run --rm \
          -v $PWD:/workspace \
          -w /workspace \
          --user root \
          -e H2O_VERIFY_SSL=false \
          -e TEST_HTTP2_HOST=localhost \
          -e TEST_HTTP2_PORT=8443 \
          -e TEST_HTTP1_HOST=localhost \
          -e TEST_HTTP1_PORT=8080 \
          -e TEST_H2_ONLY_HOST=localhost \
          -e TEST_H2_ONLY_PORT=8447 \
          -e TEST_CADDY_HOST=localhost \
          -e TEST_CADDY_PORT=8447 \
          ghcr.io/nomadlabsinc/h2o-ci:${{ github.sha }} \
          bash -c "./scripts/ci_test_runner.sh performance"

  quality:
    name: Code Quality (Lint & Build)
    runs-on: ubicloud-standard-4
    needs: build-image
    timeout-minutes: 2

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull Docker image
      run: docker pull ghcr.io/nomadlabsinc/h2o-ci:${{ github.sha }}

    - name: Install dependencies
      uses: actions/cache@v3
      with:
        path: lib/
        key: ${{ runner.os }}-shards-${{ hashFiles('shard.yml', 'shard.lock') }}
        restore-keys: |
          ${{ runner.os }}-shards-

    - name: Install dependencies (if cache miss)
      run: |
        docker run --rm \
          -v $PWD:/workspace \
          -w /workspace \
          --user root \
          ghcr.io/nomadlabsinc/h2o-ci:${{ github.sha }} \
          bash -c "shards install"

    - name: Check formatting & Run linter (parallel)
      run: |
        # Run formatting check and linting in parallel
        docker run --rm \
          -v $PWD:/workspace \
          -w /workspace \
          --user root \
          ghcr.io/nomadlabsinc/h2o-ci:${{ github.sha }} \
          bash -c "crystal tool format --check" &
        format_pid=$!

        docker run --rm \
          -v $PWD:/workspace \
          -w /workspace \
          --user root \
          ghcr.io/nomadlabsinc/h2o-ci:${{ github.sha }} \
          bash -c "if [ -f './bin/ameba' ]; then ./bin/ameba; else crystal run lib/ameba/bin/ameba.cr -- src/ spec/; fi" &
        lint_pid=$!

        # Wait for both to complete
        wait $format_pid && wait $lint_pid

    - name: Build release & docs (parallel)
      run: |
        # Run release build and docs generation in parallel
        docker run --rm \
          -v $PWD:/workspace \
          -w /workspace \
          --user root \
          ghcr.io/nomadlabsinc/h2o-ci:${{ github.sha }} \
          bash -c "crystal build src/h2o.cr --release --no-debug" &
        build_pid=$!

        docker run --rm \
          -v $PWD:/workspace \
          -w /workspace \
          --user root \
          ghcr.io/nomadlabsinc/h2o-ci:${{ github.sha }} \
          bash -c "crystal docs" &
        docs_pid=$!

        # Wait for both to complete
        wait $build_pid && wait $docs_pid

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/
